#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("server:server");
var http = require("http");
const { createTerminus } = require("@godaddy/terminus");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

function onSignal() {
    console.log("server is starting cleanup");
    // start cleanup of resource, like databases or file descriptors
}

async function onHealthCheck() {
    // checks if the system is healthy, like the db connection is live
    // resolves, if health, rejects if not
    return true;
}

createTerminus(server, {
    signal: "SIGUSR2",
    healthChecks: { "/healthcheck": onHealthCheck },
    onSignal
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);
server.on("close", () => {
    console.log("Server close");
});
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            console.error(bind + " requires elevated privileges");
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(bind + " is already in use");
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    debug("Listening on " + bind);
}

const sync_gdrive = require("../startup/sync_gdrive");

process.on("SIGTERM", function() {
    console.log("SIGTERM");
    sync_gdrive._getDB().close();
    server.close(function() {
        process.exit(0);
    });
});
process.on("SIGINT", function() {
    console.log("SIGINT");
    sync_gdrive._getDB().close();
    server.close(function() {
        process.exit(0);
    });
});

process.on("SIGUSR2", function() {
    console.log("SIGUSR2");
    sync_gdrive._getDB().close();
    server.close(function() {
        process.exit(0);
    });
});

process.on("beforeExit", () => {
    console.log("before exit");
});
process.on("exit", () => {
    console.log("exit");
});
